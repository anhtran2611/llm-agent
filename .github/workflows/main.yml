name: Build and Update Values

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  RAG_IMAGE_NAME: 'rag-pipeline'
  STREAMLIT_IMAGE_NAME: 'streamlit-app'
  NGINX_IMAGE_NAME: 'nginx'
  DOCKER_REGISTRY: 'anhtran2611/llm-repo-dockerhub' # Thay thế bằng registry 
  HELM_VALUES_REPO: 'your-org/helm-values' # Thay thế bằng repo chứa values

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Start Docker containers
        run: docker-compose -f docker-compose.yml up -d

      - name: Run tests
        run: |
          docker exec -e PYTHON_PATH="/rag-pipeline/src" python bash -c "\
          cd rag-pipeline && \
          pip install --no-cache-dir -r requirements.txt && \
          export PYTHONPATH=/rag-pipeline/src OTEL_SDK_DISABLED=true && \
          pytest --cov=src \
                 --cov-report=xml:coverage.xml \
                 --junitxml=test-reports/results.xml \
                 tests/
                 "

      - name: Check coverage
        run: |
          LINE_RATE=$(grep -m1 "line-rate" rag-pipeline/coverage.xml | sed -n 's/.*line-rate="\([^"]*\).*/\1/p')
          COVERAGE=$(echo "$LINE_RATE * 100" | bc)
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "Code coverage too low: ${COVERAGE}%"
            exit 1
          else
            echo "Coverage is sufficient: ${COVERAGE}%"
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./rag-pipeline/coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}

  build-and-update:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push RAG Pipeline image
        uses: docker/build-push-action@v4
        with:
          context: ./rag-pipeline
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.RAG_IMAGE_NAME }}:${{ github.sha }}

      - name: Build and push Streamlit image
        uses: docker/build-push-action@v4
        with:
          context: ./streamlit
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.STREAMLIT_IMAGE_NAME }}:${{ github.sha }}

      - name: Build and push Nginx image
        uses: docker/build-push-action@v4
        with:
          context: ./nginx
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.NGINX_IMAGE_NAME }}:${{ github.sha }}


